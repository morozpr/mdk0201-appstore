// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using appstore.Data;

#nullable disable

namespace appstore.Migrations
{
    [DbContext(typeof(StoredbContext))]
    [Migration("20240208154011_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("appstore.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ClientID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ClientId")
                        .HasName("Client_pkey");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("appstore.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("EmployeeID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmployeeTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("EmployeeTypeID");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Patronymic")
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployeeId")
                        .HasName("Employee_pkey");

                    b.HasIndex(new[] { "EmployeeTypeId" }, "IX_Employee_EmployeeTypeID");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("appstore.Models.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("EmployeeTypeID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("EmployeeTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("EmployeeTypeId")
                        .HasName("EmployeeType_pkey");

                    b.ToTable("EmployeeType", (string)null);
                });

            modelBuilder.Entity("appstore.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ItemID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PriceId")
                        .HasColumnType("integer")
                        .HasColumnName("PriceID");

                    b.Property<int>("StockId")
                        .HasColumnType("integer")
                        .HasColumnName("StockID");

                    b.HasKey("ItemId")
                        .HasName("Item_pkey");

                    b.HasIndex(new[] { "PriceId" }, "IX_Item_PriceID");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("appstore.Models.ItemType", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ItemTypeID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ItemTypeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ItemTypeId")
                        .HasName("ItemType_pkey");

                    b.ToTable("ItemType", (string)null);
                });

            modelBuilder.Entity("appstore.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("OrderID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("OrderId"));

                    b.Property<int>("ClientId")
                        .HasColumnType("integer")
                        .HasColumnName("ClientID");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("integer")
                        .HasColumnName("EmployeeID");

                    b.Property<int>("OrderItemsId")
                        .HasColumnType("integer")
                        .HasColumnName("OrderItemsID");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("OrderId")
                        .HasName("Order_pkey");

                    b.HasIndex(new[] { "ClientId" }, "IX_Order_ClientID");

                    b.HasIndex(new[] { "EmployeeId" }, "IX_Order_EmployeeID");

                    b.HasIndex(new[] { "OrderItemsId" }, "IX_Order_OrderItemsID");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("appstore.Models.OrderItem", b =>
                {
                    b.Property<int>("OrderItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("OrderItemsID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("OrderItemsId"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasColumnName("ItemID");

                    b.HasKey("OrderItemsId")
                        .HasName("OrderItems_pkey");

                    b.HasIndex(new[] { "ItemId" }, "IX_OrderItems_ItemID");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("appstore.Models.Price", b =>
                {
                    b.Property<int>("PriceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("PriceID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("PriceId"));

                    b.Property<DateTime>("DataSet")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DataUnSet")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("PriceId")
                        .HasName("Price_pkey");

                    b.ToTable("Price", (string)null);
                });

            modelBuilder.Entity("appstore.Models.Provider", b =>
                {
                    b.Property<int>("ProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("ProviderID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("ProviderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ProviderId")
                        .HasName("Provider_pkey");

                    b.ToTable("Provider", (string)null);
                });

            modelBuilder.Entity("appstore.Models.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("StockID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("StockId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsOnStock")
                        .HasColumnType("boolean");

                    b.Property<int>("ItemTypeId")
                        .HasColumnType("integer")
                        .HasColumnName("ItemTypeID");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SupplyItemsId")
                        .HasColumnType("integer")
                        .HasColumnName("SupplyItemsID");

                    b.HasKey("StockId")
                        .HasName("Stock_pkey");

                    b.HasIndex(new[] { "ItemTypeId" }, "IX_Stock_ItemTypeID");

                    b.ToTable("Stock", (string)null);
                });

            modelBuilder.Entity("appstore.Models.Supply", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SupplyID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("SupplyId"));

                    b.Property<int>("ProviderId")
                        .HasColumnType("integer")
                        .HasColumnName("ProviderID");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SupplyId")
                        .HasName("Supply_pkey");

                    b.HasIndex(new[] { "ProviderId" }, "IX_Supply_ProviderID");

                    b.ToTable("Supply", (string)null);
                });

            modelBuilder.Entity("appstore.Models.SupplyItem", b =>
                {
                    b.Property<int>("SupplyItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SupplyItemID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("SupplyItemId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Price")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SupplyItemId")
                        .HasName("SupplyItem_pkey");

                    b.ToTable("SupplyItem", (string)null);
                });

            modelBuilder.Entity("appstore.Models.SupplySupplyItem", b =>
                {
                    b.Property<int>("SupplyItemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("SupplyItemsID");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("SupplyItemsId"));

                    b.Property<int>("SupplyId")
                        .HasColumnType("integer")
                        .HasColumnName("SupplyID");

                    b.Property<int>("SupplyItemId")
                        .HasColumnType("integer")
                        .HasColumnName("SupplyItemID");

                    b.HasKey("SupplyItemsId")
                        .HasName("SupplyItems_pkey");

                    b.HasIndex(new[] { "SupplyId" }, "IX_SupplySupplyItem_SupplyID");

                    b.HasIndex(new[] { "SupplyItemId" }, "IX_SupplySupplyItem_SupplyItemID");

                    b.ToTable("SupplySupplyItem", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("appstore.Models.Employee", b =>
                {
                    b.HasOne("appstore.Models.EmployeeType", "EmployeeType")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeTypeId")
                        .IsRequired()
                        .HasConstraintName("empTypeID");

                    b.Navigation("EmployeeType");
                });

            modelBuilder.Entity("appstore.Models.Item", b =>
                {
                    b.HasOne("appstore.Models.Price", "Price")
                        .WithMany("Items")
                        .HasForeignKey("PriceId")
                        .IsRequired()
                        .HasConstraintName("PriceID");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("appstore.Models.Order", b =>
                {
                    b.HasOne("appstore.Models.Client", "Client")
                        .WithMany("Orders")
                        .HasForeignKey("ClientId")
                        .IsRequired()
                        .HasConstraintName("ClientID");

                    b.HasOne("appstore.Models.Employee", "Employee")
                        .WithMany("Orders")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("EmployeeID");

                    b.HasOne("appstore.Models.OrderItem", "OrderItems")
                        .WithMany("Orders")
                        .HasForeignKey("OrderItemsId")
                        .IsRequired()
                        .HasConstraintName("OrderItemsID");

                    b.Navigation("Client");

                    b.Navigation("Employee");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("appstore.Models.OrderItem", b =>
                {
                    b.HasOne("appstore.Models.Item", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .IsRequired()
                        .HasConstraintName("ItemID");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("appstore.Models.Stock", b =>
                {
                    b.HasOne("appstore.Models.ItemType", "ItemType")
                        .WithMany("Stocks")
                        .HasForeignKey("ItemTypeId")
                        .IsRequired()
                        .HasConstraintName("ItemTypeID");

                    b.Navigation("ItemType");
                });

            modelBuilder.Entity("appstore.Models.Supply", b =>
                {
                    b.HasOne("appstore.Models.Provider", "Provider")
                        .WithMany("Supplies")
                        .HasForeignKey("ProviderId")
                        .IsRequired()
                        .HasConstraintName("ProviderID");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("appstore.Models.SupplySupplyItem", b =>
                {
                    b.HasOne("appstore.Models.Supply", "Supply")
                        .WithMany("SupplySupplyItems")
                        .HasForeignKey("SupplyId")
                        .IsRequired()
                        .HasConstraintName("SupplyID");

                    b.HasOne("appstore.Models.SupplyItem", "SupplyItem")
                        .WithMany("SupplySupplyItems")
                        .HasForeignKey("SupplyItemId")
                        .IsRequired()
                        .HasConstraintName("SupplyItemID");

                    b.Navigation("Supply");

                    b.Navigation("SupplyItem");
                });

            modelBuilder.Entity("appstore.Models.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("appstore.Models.Employee", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("appstore.Models.EmployeeType", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("appstore.Models.Item", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("appstore.Models.ItemType", b =>
                {
                    b.Navigation("Stocks");
                });

            modelBuilder.Entity("appstore.Models.OrderItem", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("appstore.Models.Price", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("appstore.Models.Provider", b =>
                {
                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("appstore.Models.Supply", b =>
                {
                    b.Navigation("SupplySupplyItems");
                });

            modelBuilder.Entity("appstore.Models.SupplyItem", b =>
                {
                    b.Navigation("SupplySupplyItems");
                });
#pragma warning restore 612, 618
        }
    }
}
